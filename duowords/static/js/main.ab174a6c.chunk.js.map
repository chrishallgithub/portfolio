{"version":3,"sources":["snackbar.js","checkFlag.js","Navigation.js","Words.js","App.js","serviceWorker.js","index.js"],"names":["SimpleSnackbar","state","open","handleClick","_this","setState","handleClose","event","reason","classes","this","props","message","timeout","react_default","a","createElement","Snackbar_default","anchorOrigin","vertical","horizontal","autoHideDuration","Number","onClose","ContentProps","aria-describedby","id","action","IconButton_default","key","aria-label","color","className","close","onClick","Close_default","React","Component","withStyles","theme","padding","spacing","unit","checkFlag","lang","console","log","FlagIcon","FlagIconFactory","useCssModules","langsQuery","gql","_templateObject","Nav","_Component","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","toggleAllTranslations","document","getElementById","classList","toggle","translations","getElementsByClassName","i","length","remove","toggleFavourites","handleFavouritesClick","favouritesView","inherits","createClass","value","_this2","react_apollo_browser_umd","query","_ref","loading","data","refetch","langs","newAdded","map","Fab_default","changeLang","size","data-current-language","currentLang","code","e","Favorite_default","Translate_default","langWordsQuery","Words_templateObject","updateFavouriteMutation","_templateObject2","GetWords","toggleSingleTranslation","updateFavourite","_callee","word","regenerator_default","wrap","_context","prev","next","variables","favourite","update","store","readQuery","langWords","x","objectSpread","writeQuery","stop","_ref2","every","Card_default","CardContent_default","Typography_default","variant","component","FavoriteBorder_default","data-flag","flag","data-favourite","data-lang","data-lesson","lessonTitle","singleWord","transReturn","CardActions_default","graphql","name","lessonCheckQuery","App_templateObject","createWordsMutation","App_templateObject2","_templateObject3","App","getLessons","fetch","then","response","json","duoJ","keys","language_data","toString","currentFlag","_loop","skills","title","words","lessonCheck","prepareWords","catch","err","noLoad","toTrans","longestWord","split","sort","b","push","getTrans","url","encodeURIComponent","join","duoTransJ","transWord","transCheck","createWord","noTrans","asyncToGenerator","mark","_x","_x2","_x3","_x4","_x5","apply","arguments","_callee2","lesson","language","_context2","abrupt","sent","_x6","_x7","newFlag","displayError","error","snackbar","CircularProgress_default","noLang","Navigation_Nav","role","Words","compose","Boolean","window","location","hostname","match","client","ApolloClient","uri","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ab174a6c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst styles = theme => ({\n  close: {\n    padding: theme.spacing.unit / 2,\n  },\n});\n\nclass SimpleSnackbar extends React.Component {\n  state = {\n    open: true,\n  };\n\n  handleClick = () => {\n    this.setState({ open: true });\n  };\n\n  handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    this.setState({ open: false });\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { message } = this.props;\n    const { timeout } = this.props;\n\n    //const { name, image } = this.props.item;\n    //const message = { uri: image };\n\n    return (\n      <div>\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left',\n          }}\n          open={this.state.open}\n          autoHideDuration={Number(timeout)}\n          onClose={this.handleClose}\n          ContentProps={{\n            'aria-describedby': 'message-id',\n          }}\n          message={<span id=\"message-id\">{message}</span>}\n          action={[\n            <IconButton\n              key=\"close\"\n              aria-label=\"Close\"\n              color=\"inherit\"\n              className={classes.close}\n              onClick={this.handleClose}\n            >\n              <CloseIcon />\n            </IconButton>,\n          ]}\n        />\n      </div>\n    );\n  }\n}\n\nSimpleSnackbar.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SimpleSnackbar);","/*\n\n    1a. Not all languages have the same ISO 639-1 & ISO 3166 code for languages and flags. Spain and Spanish does (es & es). Sweden and Swedish does not (se & sv)\n    1b. This adds an ISO 3166 country code, so that a flag to represent the language can be rendered. NB These can be contentious, eg English represented by flag of USA, Portuguese flag represented by flag of Brasil.\n\n    Available country codes:\n\n    [\"af\",\"ax\",\"al\",\"dz\",\"as\",\"ad\",\"ao\",\"ai\",\"aq\",\"ag\",\"ar\",\"am\",\"aw\",\"au\",\"at\",\"az\",\"bs\",\"bh\",\"bd\",\"bb\",\"by\",\"be\",\"bz\",\"bj\",\"bm\",\"bt\",\"bo\",\"bq\",\"ba\",\"bw\",\"bv\",\"br\",\"io\",\"bn\",\"bg\",\"bf\",\"bi\",\"kh\",\"cm\",\"ca\",\"cv\",\"es-ct\",\"ky\",\"cf\",\"td\",\"cl\",\"cn\",\"cx\",\"cc\",\"co\",\"km\",\"cg\",\"cd\",\"ck\",\"cr\",\"ci\",\"hr\",\"cu\",\"cw\",\"cy\",\"cz\",\"dk\",\"dj\",\"dm\",\"do\",\"ec\",\"eg\",\"sv\",\"gq\",\"er\",\"ee\",\"et\",\"eu\",\"fk\",\"fo\",\"fj\",\"fi\",\"fr\",\"gf\",\"pf\",\"tf\",\"ga\",\"gm\",\"ge\",\"de\",\"gh\",\"gi\",\"gr\",\"gl\",\"gd\",\"gp\",\"gu\",\"gt\",\"gg\",\"gn\",\"gw\",\"gy\",\"ht\",\"hm\",\"va\",\"hn\",\"hk\",\"hu\",\"is\",\"in\",\"id\",\"ir\",\"iq\",\"ie\",\"im\",\"il\",\"it\",\"jm\",\"jp\",\"je\",\"jo\",\"kz\",\"ke\",\"ki\",\"kp\",\"kr\",\"kw\",\"kg\",\"la\",\"lv\",\"lb\",\"ls\",\"lr\",\"ly\",\"li\",\"lt\",\"lu\",\"mo\",\"mk\",\"mg\",\"mw\",\"my\",\"mv\",\"ml\",\"mt\",\"mh\",\"mq\",\"mr\",\"mu\",\"yt\",\"mx\",\"fm\",\"md\",\"mc\",\"mn\",\"me\",\"ms\",\"ma\",\"mz\",\"mm\",\"na\",\"nr\",\"np\",\"nl\",\"nc\",\"nz\",\"ni\",\"ne\",\"ng\",\"nu\",\"nf\",\"mp\",\"no\",\"om\",\"pk\",\"pw\",\"ps\",\"pa\",\"pg\",\"py\",\"pe\",\"ph\",\"pn\",\"pl\",\"pt\",\"pr\",\"qa\",\"re\",\"ro\",\"ru\",\"rw\",\"bl\",\"sh\",\"kn\",\"lc\",\"mf\",\"pm\",\"vc\",\"ws\",\"sm\",\"st\",\"sa\",\"sn\",\"rs\",\"sc\",\"sl\",\"sg\",\"sx\",\"sk\",\"si\",\"sb\",\"so\",\"za\",\"gs\",\"ss\",\"es\",\"lk\",\"sd\",\"sr\",\"sj\",\"sz\",\"se\",\"ch\",\"sy\",\"tw\",\"tj\",\"tz\",\"th\",\"tl\",\"tg\",\"tk\",\"to\",\"tt\",\"tn\",\"tr\",\"tm\",\"tc\",\"tv\",\"ug\",\"ua\",\"ae\",\"gb\",\"gb-eng\",\"gb-nir\",\"gb-sct\",\"gb-wls\",\"un\",\"us\",\"um\",\"uy\",\"uz\",\"vu\",\"ve\",\"vn\",\"vg\",\"vi\",\"wf\",\"eh\",\"ye\",\"zm\",\"zw\"]\n\n*/\n\nexport let checkFlag = (lang) => {\n\n    switch (lang) {\n        case \"sv\": //Swedish\n            //console.log(\"Flag added for language - \" + lang);\n            return \"se\";\n\n        //TO DO: Untested other than default from here!\n\n        case \"je\": //Japanese\n            //console.log(\"Flag added for language - \" + lang);\n            return \"jp\";\n\n        case \"kr\": //Korean\n            //console.log(\"Flag added for language - \" + lang);\n            return \"ko\";\n\n        case \"zh\": //Chinese\n            //console.log(\"Flag added for language - \" + lang);\n            return \"cn\";\n\n        case \"el\": //Greek\n            //console.log(\"Flag added for language - \" + lang);\n            return \"gr\";\n\n        case \"ga\": //Irish\n            //console.log(\"Flag added for language - \" + lang);\n            return \"ie\";\n\n        case \"he\": //Hebrew\n            //console.log(\"Flag added for language - \" + lang);\n            return \"il\";\n\n        case \"vi\": //Vietnamese\n            console.log(\"Flag added for language - \" + lang);\n            return \"vn\";\n\n        case \"da\": //Danish\n            //console.log(\"Flag added for language - \" + lang);\n            return \"dk\";\n\n        case \"hi\": //Hindi\n            //console.log(\"Flag added for language - \" + lang);\n            return \"in\";\n\n        case \"sw\": //Swahili\n            //console.log(\"Flag added for language - \" + lang);\n            return \"tz\";\n\n        case \"uk\": //Ukrainian\n            console.log(\"Flag added for language - \" + lang);\n            return \"ua\";\n\n        case \"cs\": //Czech\n            //console.log(\"Flag added for language - \" + lang);\n            return \"cz\";\n\n        case \"ar\": //Arabic\n            //console.log(\"Flag added for language - \" + lang);\n            return \"ae\"; //uae\n\n        case \"en\": //English\n            //console.log(\"Flag added for language - \" + lang);\n            return \"gb\"; //Not the USA\n\n        case \"cy\": //Welsh\n            //console.log(\"Flag added for language - \" + lang);\n            return \"gb-wls\"; //Wales\n\n        case \"gn\": //Guarani\n            //console.log(\"Flag added for language - \" + lang);\n            return \"py\"; //Paraguay\n\n        case \"pa\": //Punjabi\n            //console.log(\"Flag added for language - \" + lang);\n            return \"in\"; //India\n\n        case \"ca\": //Catalan\n            //console.log(\"Flag added for language - \" + lang);\n            return \"es-ct\"; //Catalan Flag\n\n        //Leave Portuguese as Portugal, or Brasil?\n\n        default: //TO DO: [EN] to Navajo, Hawaiian, Esperanto, High Valyrian, Klingon\n            //console.log(\"Country code not changed for language code \" + lang);\n            return lang;\n    }\n\n}","import React, {Component} from 'react'; \nimport {Query} from 'react-apollo';\nimport gql from \"graphql-tag\"; //parses the query\n\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport Fab from '@material-ui/core/Fab';\n\nimport {checkFlag} from './checkFlag'; //?? Needed ?? Use the method on App.js\n\nimport FlagIconFactory from 'react-flag-icon-css'\nconst FlagIcon = FlagIconFactory(React, { useCssModules: false });\n\nconst langsQuery = gql`{\n    langs\n}`;\n\n/*\n\n1. Query the db for all languages and flags for the navigation.\n2. Handle naviagation clicks for changing language, toggling favourites view, and translate all.\n\n*/\n\nexport class Nav extends Component {\n\n    constructor(props) {\n       \n        super(props);\n\n        this.state = {\n            favouritesView: false //initial view\n\n        }\n\n    }\n\n    toggleAllTranslations = () => { //Toggle all translations \n        document.getElementById(\"wordContainer\").classList.toggle('showTrans');\n\n        //Hide all individual translations.\n        //TO DO: Is there a better way? Feels inefficient for thousands of words... Add to/ remove from array?\n        //Update cache? See updateFavourite\n        //decide display on Render?\n        //Actually faster to do this?\n\n        let translations = document.getElementsByClassName(\"translation\");\n        for(var i=0; i<translations.length; i++) {\n            translations[i].classList.remove('showTrans');\n        }\n\n    }\n\n    toggleFavourites = () => { //Toggle Favourites View\n        document.getElementById(\"wordContainer\").classList.toggle('showFavourites');\n\n        return this.props.handleFavouritesClick(); //pass to state on main App.\n\n\n    }\n\n    render(){\n\n        return (\n\n            <nav>\n\n                <Query query={langsQuery}>  \n\n                    {({loading, data, refetch}) => {\n                        \n                        if(loading){\n\n                            return null;\n                        }\n\n                        const {langs} = data;\n\n                        if(this.props.newAdded === true){ //All new words have been added. Refetch to get the lang & flag.\n                            refetch();\n                        }\n\n                        return langs.map(lang => (\n\n                            <Fab key={lang} className={\"lang button\"} onClick={() => {this.props.changeLang(lang)}} color=\"primary\" aria-label=\"Change Language\" size=\"small\" data-current-language={this.props.currentLang === lang ? true : false}  >\n                                <FlagIcon code={checkFlag(lang)} />\n                            </Fab>\n                        \n                        ))}\n\n                    }\n                            \n\n                </Query>\n\n                <Fab color=\"primary\" aria-label=\"Toggle Favourite\" className={\"button\"} size=\"small\" onClick={(e) => this.toggleFavourites()}>\n\n                \n\n\n                    <FavoriteIcon />\n                </Fab>\n\n                <Fab color=\"primary\" aria-label=\"Toggle All Translations\" className={\"button\"} size=\"small\" onClick={(e) => this.toggleAllTranslations()}>\n                    <TranslateIcon />\n                </Fab>\n\n            </nav>\n\n        )\n    }\n\n}","import React, {Component} from 'react'; \nimport {graphql, Query} from 'react-apollo';\nimport gql from \"graphql-tag\"; //parses the query\n\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport IconButton from '@material-ui/core/IconButton';\n\n/*\n\n1. Query the db, return all words for the language currently being studied on Duolingo.\n2. Handle clicks on card: add to favourite, show individual translation.\n\n*/\n\n\nconst langWordsQuery = gql`\n    query langWords($lang: String!) { \n        langWords(lang: $lang){\n            id\n            lang\n            flag\n            lessonTitle\n            singleWord\n            transReturn\n            favourite\n        }\n    }\n`;\n\nconst updateFavouriteMutation = gql`\n    mutation($id: ID!, $favourite: Boolean!){ \n        updateFavourite(id: $id, favourite: $favourite)\n    }\n`;\n\n\nclass GetWords extends Component {\n\n    toggleSingleTranslation = (id) => {\n        document.getElementById(id).classList.toggle('showTrans');\n\n    }\n\n    toggleFavourites = () => { //Needed to return to all view if no favourites; the link on page, not header\n        document.getElementById(\"wordContainer\").classList.toggle('showFavourites');\n        return this.props.handleFavouritesClick();\n\n    }\n\n    updateFavourite = async word => { //Update the db record, and the local cache\n\n        await this.props.updateFavourite({\n            variables:{\n                id: word.id,\n                favourite: !word.favourite //do the opposite of the current value\n            },\n            \n            update: store => { //store is Apollo's cache https://www.apollographql.com/docs/angular/features/cache-updates.html#directAccess //Don't need the response to update the cache, as it is just a boolean to check if it is a favourite or not.\n                // Read the data from our cache for this query.\n                const data = store.readQuery({query: langWordsQuery, variables: {lang: this.props.currentLang}}); //False is the default view, will generate onLoad\n\n                data.langWords = data.langWords.map(x => x.id === word.id ? ({\n                    ...word,\n                    favourite: !word.favourite\n                }) : x ) ; //loop through until it finds the correct one\n                // Write our data back to the cache.\n                store.writeQuery({ query: langWordsQuery, variables: {lang: this.props.currentLang}, data });\n       \n            }\n\n        });\n    };\n\n\n    render(){\n\n        //Query all words in the db.\n\n        return (\n\n            <Query query={langWordsQuery} variables={{lang: this.props.currentLang}}>\n\n                {({loading, data, refetch}) => {\n\n                    if(loading || this.props.newAdded === false){ //Are there new words in the process of being added? See App.js > getLessons()\n                        return null;\n                    }\n\n                    const {langWords} = data;\n\n                    if (langWords.every(e => e.favourite !== true) && this.props.favouritesView){ //If no favourites & favourites view is selected display help.\n                        return (\n                            <div className={\"noFavouritesCont\"}>\n                                <Card className={\"noFavourites\"} onClick={this.toggleFavourites}>\n\n                                    <CardContent className={\"noFavouritesContent\"}>\n                                        <Typography variant=\"h5\" component=\"h2\">\n                                            You currently have no favourites.<br />\n                                            Add favourites by clicking\n                                            <IconButton aria-label=\"Toggle Favourite Example\" >\n                                                <FavoriteBorderIcon />\n                                            </IconButton>\n                                        </Typography>\n                                        <Typography component=\"p\">\n                                            <span className={\"noFavouritesButton\"}>\n                                                Click here to return.\n                                            </span>\n                                        </Typography>\n                                    </CardContent>\n\n                                </Card>\n                            </div>\n                        )\n                    }\n\n                    else if(this.props.newAdded === true){ //All new words have been added. Refetch.\n                        refetch();\n                    }\n\n                    return langWords.map(word => (\n\n                        <Card key={word.id} className={\"wordBoxCont\"} data-flag={word.flag} data-favourite={word.favourite} data-lang={word.lang} data-lesson={word.lessonTitle}>\n\n                            <CardContent className={\"wordContent\"}>\n                                <Typography variant=\"h5\" component=\"h2\" className={\"original\"}>\n                                    {word.singleWord}\n                                </Typography>\n                                <Typography component=\"p\" id={word.id} className={\"translation\"}>\n                                    {word.transReturn}\n                                </Typography>\n                            </CardContent>\n\n                            <CardActions className={\"buttons\"}>\n\n                                <IconButton aria-label=\"Toggle Favourite\" className={\"button favouriteButton\"} size=\"small\" onClick={() => {this.updateFavourite(word);}}>{/* Toggle if word is in Favourites list. Add a toggle disable until callback? */}\n\n                                    {word.favourite === true ? <FavoriteIcon /> : <FavoriteBorderIcon />}\n\n                                </IconButton>\n\n                                <IconButton aria-label=\"Toggle Translation\" className={\"button translationButton\"} size=\"small\" onClick={() => this.toggleSingleTranslation(word.id)}>\n                                    <TranslateIcon />\n                                </IconButton>\n\n                            </CardActions>\n\n                        </Card>\n\n                    ))\n\n                }}   \n\n            </Query>\n        )\n    }\n}\n\n//TO DO: Is it possible to export a named component with Apolloql?\nexport default graphql(updateFavouriteMutation, {name: 'updateFavourite'})(GetWords);","import React, {Component} from 'react'; \nimport \"./styles/styles.scss\";\nimport {graphql, compose} from 'react-apollo'; //Bind the query to the component. See export. //Rather than inject ever mutation here, use graphql's compose\nimport gql from \"graphql-tag\"; //parses the query\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport SimpleSnackbar from './snackbar';\n\nimport {Nav} from './Navigation';\nimport GetWords from './Words';\n\nimport {checkFlag} from './checkFlag';\n\n//Return the favourites query as an object, or use ID and the cache will update automatically.\n\n/*\n\nNeed to disable CORS in browser for this to work.\n\n[getLessons > prepareWords > getTrans > createWord]\n1. Call Duolingo API for latest lesson list.\n2. Check db for each lesson title. If exists, skip.\n3. If lesson title does not exit, find the longest word in each phrase in the lesson, translate it up using Duoling Translate (only accepts one word)\n4. Add lessons that aren't already in the db.\n\n5. Check a language has been set, a flag has been assigned, and no errors.\n6. Query the db for all languages and flags for the navigation.\n7. Query the db, return all words for the language currently being studied on Duolingo.\n\n\n*/\n\n/*\n\nTO DO:\n1. Improve initial loading of words from remote JSON. Loading screens. Pagination? Lazyload? Only one lesson at a time?\n2. langsQuery & flag queries are imported twice. Find a better way.\n3. Add ability to enter a username and pull other users lessons.\n4. App.js getLessons() -> \"this.lessonCheckQuery(lessonTitle, lang).then((value) => {\" Don't make functions within loops!\n5. Find alternative translation method. Number of API calls allowed?\n6. Responsive design. CSS needs work.\n7. Scroll top.\n8. Error testing.\n\n\n*/\n\n//Variables in graphql are $variable\n//Make sure the types as declared below match the ones in the schema.\nconst lessonCheckQuery = gql`\n    mutation($lessonTitle: String!, $lang: String!){ \n        lessonCheck(lessonTitle: $lessonTitle, lang: $lang)\n    }\n`;\n\nconst createWordsMutation = gql`\n    mutation($lang: String!, $flag: String! $lessonTitle: String!, $singleWord: String!, $transReturn:String){\n        createWord(lang: $lang, flag: $flag, lessonTitle: $lessonTitle, singleWord: $singleWord, transReturn: $transReturn){\n            id\n            lang\n            flag\n            lessonTitle\n            singleWord\n            transReturn \n        }\n    }\n`;\n\nconst langsQuery = gql`{\n    langs\n}`;\n\nclass App extends Component {\n\n    constructor(props) {\n       \n        super(props); //super allows \"this\"\n\n        this.state = {\n            currentLang: \"\", //This gets updated in lessonCheck, with fallback.\n            currentFlag: \"\", //This gets updated in lessonCheck, with fallback.\n            favouritesView: false, //toggleable favourites view\n            noLoad: false, //if the language json object cannot be accessed, attempt to access the first language in the db, but display a loading error message.\n            noLang: false, //Could not load json, and nothing stored in db\n            noTrans: false //External translation error\n\n        }\n\n    }\n\n    componentDidMount(){    \n\n        this.getLessons();\n\n    }//end componentDidMount\n\n    componentDidUpdate(){\n\n        if(this.props.langs.loading === false && this.state.noLoad === true && this.state.noLang === false && this.state.currentLang === \"\"){\n            \n            try { //The live version language json has failed to load, but there may be language info in the db; if there is, use it.\n\n                if(typeof this.props.langs.langs[0] !== \"undefined\"){\n\n                    let lang = this.props.langs.langs[0];\n\n                    let flag = checkFlag(lang);\n\n                    this.setState({\n                        currentLang: lang,\n                        currentFlag: flag,\n                    })\n\n                }\n\n                else{\n\n                    this.setState({ //Could not load json, and nothing stored in db.\n                        noLang: true\n\n                    })\n\n                }\n\n            }\n\n            catch (error) {                \n                console.log(error);\n                \n            }\n\n        }\n\n    }\n\n    getLessons = () => {\n\n        //fetch the data, wait for response \"then()\", then process\n        //fetch('./resources/duolingoEmpty.json').then((response) => { //testing\n        //fetch('./resources/duolingo.json').then((response) => { //testing\n        fetch('/duolingo/cduo.json').then(function(response) { //testing //Enable CORS in browser.\n        //fetch('https://www.duolingo.com/users/cduo').then(function(response) {  //Live version. Enable CORS in browser.\n\n            // Convert to JSON\n            return response.json();\n\n        }).then((duoJ) => { // 'duoJ' is a JavaScript object\n\n            let lang = Object.keys(duoJ.language_data).toString(); //get active language. JSON only returns the most recently accessed language. Change by visiting other language on the App/ website\n\n            let flag = checkFlag(lang);\n\n            this.setState({\n                currentLang: lang,\n                currentFlag: flag\n            })\n\n            for (let i = 0; i < duoJ.language_data[lang].skills.length; i++) {\n            //for (var i = 0; i < 1; i++) { //testing to reduce API calls\n\n                let lessonTitle = duoJ.language_data[lang].skills[i].title;\n                let words = duoJ.language_data[lang].skills[i].words;\n\n                //use lessonCheckQuery to check the lessonTitle. As this is returned by promise, have to use a then() to evaluate the value\n                //TO DO: Don't make functions within loops! :/\n                this.lessonCheckQuery(lessonTitle, lang).then((value) => {\n                    //console.log(value.data.lessonCheck);\n\n                    if(value.data.lessonCheck === true){\n                        console.log(\"Lesson Exists in DB\");\n                    }\n                    else{\n                        console.log(\"To be added: Lesson \" + lessonTitle);\n\n                        this.setState({\n                            newAdded: false\n                        })\n\n                        this.prepareWords(words, lang, flag, lessonTitle);\n\n                    }\n\n                })\n                \n            }\n\n        }).catch((err) => {\n            // Error :(\n            console.log(\"Fetch Error\");\n\n            this.setState({\n                noLoad: true\n            })\n\n\n        });\n    }\n\n    prepareWords = (words, lang, flag, lessonTitle) => {   \n\n        var toTrans = [];\n\n        for (var word in words) {\n            \n            //TO DO: Use alternate translation API? Only one word can be translated using Duolingo's dictionary, so check if there is more than one word. If there is, get the longest.\n            var longestWord = words[word].split(' ').sort(function(a, b) { return b.length - a.length; });\n\n            toTrans.push(longestWord[0]);\n                   \n        }\n\n        this.getTrans(toTrans, lessonTitle, lang, flag);\n\n\n    }//end prepareWords\n\n    getTrans = (toTrans, lessonTitle, lang, flag) => {\n\n        //Need to disable CORS in browser for this to work. Safari > Dev > Disable CORS\n        var url = 'https://d2.duolingo.com/api/1/dictionary/hints/' + lang + '/en?tokens=' + encodeURIComponent('[\"' + toTrans.join('\", \"') + '\"]');\n\n        fetch(url).then((response) => { \n\n            // Convert to JSON\n            return response.json();\n\n        }).then((duoTransJ) => {\n\n            for (var transWord in toTrans) {\n\n                //check a word is returned\n                var transCheck;\n                if (duoTransJ[toTrans[transWord]].length) {\n                    transCheck = duoTransJ[toTrans[transWord]].join(\", \");\n                }\n\n                else{\n                    transCheck = \"[Not Found]\";\n                }\n\n                this.createWord(lang, flag, lessonTitle, toTrans[transWord], transCheck); //send to db\n                console.log(\"Adding: Lesson \" + lessonTitle);\n\n            }\n\n            console.log(\"All added\");\n\n            this.setState({\n                newAdded: true\n            })\n\n        }).catch((err) => {\n            console.log(\"Translation Error\");\n            console.log(err);\n\n            this.setState({\n                noTrans: true\n            })\n\n        });\n\n    }//end getTrans\n\n\n    createWord = async (lang, flag, lessonTitle, singleWord, transReturn) => {\n        //create Word\n        await this.props.createWord({\n                variables:{\n                lang,\n                flag,\n                lessonTitle,\n                singleWord,\n                transReturn\n            }\n        });//No need to update cache, as this only gets called on page load.\n\n    }\n\n    lessonCheckQuery = async(lesson, language) => {\n\n        //Feed in a lesson title, if exists, do not add.\n        return await this.props.lessonCheck({\n            variables:{\n                lessonTitle: lesson,\n                lang: language\n            }\n\n        })\n\n    }\n\n    handleFavouritesClick = () => {\n        this.setState({\n            favouritesView: !this.state.favouritesView\n\n        });\n\n    }\n\n    changeLang = (lang) => {\n        let newFlag = checkFlag(lang);\n\n        //update the view without changing the value of the current DuoLingo language\n        this.setState({\n            currentLang: lang,\n            currentFlag: newFlag,\n            favouritesView: false\n\n        });\n        //Show all words, not just favourites\n        document.getElementById(\"wordContainer\").classList.remove('showFavourites');\n\n    }\n\n    displayError = (error, json) => { //Handle all snackbar error messages\n\n        if(json === true){\n            return <SimpleSnackbar message={error} timeout=\"10000\" />\n            \n        }\n        else{\n            return (\n                <div className={\"loading\"}>\n                    <CircularProgress className={\"loadingCircle\"}/>\n                    <SimpleSnackbar message={error} timeout=\"10000\" />\n                </div>\n            )\n\n        }\n\n    }    \n\n    render() {\n\n        //Wait until the following have been generated.\n        if((this.state.currentLang === \"\" || this.state.currentFlag === \"\" ) && this.state.noLang === false){\n            return this.displayError(\"Attempting to update language information.\")\n        }\n        else if(this.state.noTrans === true){\n            return this.displayError(\"Translation error.\")\n        }\n        else if(this.state.noLang === true){\n            return this.displayError(\"No data found. Please check your internet connection and try again.\")\n        }\n\n        return (\n\n            <div id=\"app\">\n\n                <header>\n\n                    <Nav newAdded={this.state.newAdded} changeLang={this.changeLang} handleFavouritesClick={this.handleFavouritesClick} toggleFavourites={this.toggleFavourites} currentLang={this.state.currentLang} />\n\n                </header>\n\n                <main role=\"main\" id=\"wordContainer\" className=\"words hideTrans\">\n\n                    <GetWords currentLang={this.state.currentLang} newAdded={this.state.newAdded} favouritesView={this.state.favouritesView} handleFavouritesClick={this.handleFavouritesClick} />\n\n                    {/* If the language json fails to load, but there is language information in the db, display \"Offline mode\" */}\n                    {this.state.noLoad ? this.displayError(\"Could not update language information. Offline mode activated.\", true) : false}\n\n                </main>\n\n            </div>  \n\n        );\n\n    }\n}\n\nexport default compose(\n    graphql(createWordsMutation, {name: 'createWord'}), //name is how it will appear on this object.\n    graphql(lessonCheckQuery, {name: 'lessonCheck'}),\n    graphql(langsQuery, {name: 'langs'})\n)(App); \n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ApolloClient from \"apollo-boost\";\nimport {ApolloProvider} from 'react-apollo';\n\nconst client = new ApolloClient({\n    //uri: \"http://localhost:4000\", //uri to Express server. \"http://localhost:4000\"\n    uri: \"https://duowordsdb.herokuapp.com\", //uri to Express server.\n    \n});\n\n//Wrapping the app in <ApolloProvider> allows Apollo to be accessed throughout the entire app.\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}